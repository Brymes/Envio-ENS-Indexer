type EventsSummary {
    id: ID!
    approvalForAll: [ApprovalForAll!]! @derivedFrom(field: "eventsSummary")
    approvalForAllsCount: BigInt!
    newOwner: [NewOwner!]! @derivedFrom(field: "eventsSummary")
    newOwnersCount: BigInt!
    newResolver: [NewResolver!]! @derivedFrom(field: "eventsSummary")
    newResolversCount: BigInt!
    newTTL: [NewTTL!]! @derivedFrom(field: "eventsSummary")
    newTTLsCount: BigInt!
    transfer: [Transfer!]! @derivedFrom(field: "eventsSummary")
    transfersCount: BigInt!
}

type ApprovalForAll {
    id: ID!
    owner: String!
    operator: String!
    approved: Boolean!
    eventsSummary: String!
}

type NewOwner {
    id: ID!
    node: String!
    label: String!
    owner: String!
    eventsSummary: String!
}

type NewResolver {
    id: ID!
    node: String!
    resolver: String!
    eventsSummary: String!
}

type NewTTL {
    id: ID!
    node: String!
    ttl: BigInt!
    eventsSummary: String!
}

type Transfer {
    id: ID!
    node: String!
    owner: String!
    eventsSummary: String!
}


type Account {
    "The unique identifier for the account"
    id: ID!
#    "The domains owned by the account"
#    domains: [Domain!]! @derivedFrom(field: "owner")
}

type Domain  {
    "The namehash of the name"
    id: ID!
    "The human readable label name (imported from CSV), if known"
    label: String
#    "keccak256(labelName)"
#    labelhash: Bytes
#    "The namehash (id) of the parent name"
#    parent: Domain
#    "Can count domains from length of array"
#    subdomains: [Domain!]! @derivedFrom(field: "parent")
#    "The number of subdomains"
#    subdomainCount: Int!
    "The time-to-live (TTL) value of the domain's records"
    ttl: BigInt
    "The time when the domain was created"
    blockTimestamp: Int!
    "The account that owns the domain"
    owner: Account!
    "The expiry date for the domain, from either the registration, or the wrapped domain if PCC is burned"
    expiryDate: BigInt
    "Indicates whether the domain has been migrated to a new registrar"
    isMigrated: Boolean!
}