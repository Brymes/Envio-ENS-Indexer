type ENSRegistryEventsSummary {
    id: ID!
    approvalForAll: [ApprovalForAll!]! @derivedFrom(field: "eventsSummary")
    approvalForAllsCount: BigInt!
    newOwner: [NewOwner!]! @derivedFrom(field: "eventsSummary")
    newOwnersCount: BigInt!
    newResolver: [NewResolver!]! @derivedFrom(field: "eventsSummary")
    newResolversCount: BigInt!
    newTTL: [NewTTL!]! @derivedFrom(field: "eventsSummary")
    newTTLsCount: BigInt!
    transfer: [Transfer!]! @derivedFrom(field: "eventsSummary")
    transfersCount: BigInt!
}

type ApprovalForAll {
    id: ID!
    owner: String!
    operator: String!
    approved: Boolean!
    eventsSummary: String!
}

type NewOwner {
    id: ID!
    node: String!
    label: String!
    owner: String!
    eventsSummary: String!
}

type NewResolver {
    id: ID!
    node: String!
    resolver: String!
    eventsSummary: String!
}

type NewTTL {
    id: ID!
    node: String!
    ttl: BigInt!
    eventsSummary: String!
}

type Transfer {
    id: ID!
    node: String!
    owner: String!
    eventsSummary: String!
}


type EthRegistrarControllerEventSummary {
    id: ID!
    nameRegistered: [NameRegistered!]! @derivedFrom(field: "eventsSummary")
    nameRegisteredsCount: BigInt!
    nameRenewed: [NameRenewed!]! @derivedFrom(field: "eventsSummary")
    nameRenewedsCount: BigInt!
    ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "eventsSummary")
    ownershipTransferredsCount: BigInt!
}

type NameRegistered {
    id: ID!
    name: String!
    label: String!
    owner: String!
    baseCost: BigInt!
    premium: BigInt!
    expires: BigInt!
    eventsSummary: String!
}

type NameRenewed {
    id: ID!
    name: String!
    label: String!
    cost: BigInt!
    expires: BigInt!
    eventsSummary: String!
}

type OwnershipTransferred {
    id: ID!
    previousOwner: String!
    newOwner: String!
    eventsSummary: String!
}

type NameWrapperEventsSummary {
    id: ID!
    approval: [Approval!]! @derivedFrom(field: "eventsSummary")
    approvalsCount: BigInt!
    approvalForAll: [NWApprovalForAll!]! @derivedFrom(field: "eventsSummary")
    approvalForAllsCount: BigInt!
    controllerChanged: [ControllerChanged!]! @derivedFrom(field: "eventsSummary")
    controllerChangedsCount: BigInt!
    expiryExtended: [ExpiryExtended!]! @derivedFrom(field: "eventsSummary")
    expiryExtendedsCount: BigInt!
    fusesSet: [FusesSet!]! @derivedFrom(field: "eventsSummary")
    fusesSetsCount: BigInt!
    nameUnwrapped: [NameUnwrapped!]! @derivedFrom(field: "eventsSummary")
    nameUnwrappedsCount: BigInt!
    nameWrapped: [NameWrapped!]! @derivedFrom(field: "eventsSummary")
    nameWrappedsCount: BigInt!
    ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "eventsSummary")
    ownershipTransferredsCount: BigInt!
    transferBatch: [TransferBatch!]! @derivedFrom(field: "eventsSummary")
    transferBatchsCount: BigInt!
    transferSingle: [TransferSingle!]! @derivedFrom(field: "eventsSummary")
    transferSinglesCount: BigInt!
    uRI: [URI!]! @derivedFrom(field: "eventsSummary")
    uRIsCount: BigInt!
}

type Approval {
    id: ID!
    owner: String!
    approved: String!
    tokenId: BigInt!
    eventsSummary: String!
}

type NWApprovalForAll {
    id: ID!
    account: String!
    operator: String!
    approved: Boolean!
    eventsSummary: String!
}

type ControllerChanged {
    id: ID!
    controller: String!
    active: Boolean!
    eventsSummary: String!
}

type ExpiryExtended {
    id: ID!
    node: String!
    expiry: BigInt!
    eventsSummary: String!
}

type FusesSet {
    id: ID!
    node: String!
    fuses: BigInt!
    eventsSummary: String!
}

type NameUnwrapped {
    id: ID!
    node: String!
    owner: String!
    eventsSummary: String!
}

type NameWrapped {
    id: ID!
    node: String!
    name: String!
    owner: String!
    fuses: BigInt!
    expiry: BigInt!
    eventsSummary: String!
}

type TransferBatch {
    id: ID!
    operator: String!
    from: String!
    to: String!
    ids: [BigInt!]!
    values: [BigInt!]!
    eventsSummary: String!
}

type TransferSingle {
    id: ID!
    operator: String!
    from: String!
    to: String!
    eventId: BigInt!
    value: BigInt!
    eventsSummary: String!
}

type URI {
    id: ID!
    value: String!
    eventId: BigInt!
    eventsSummary: String!
}


type Account {
    "The unique identifier for the account"
    id: ID!
    "The domains owned by the account"
    domains: [Domain!]! @derivedFrom(field: "owner")
    "The WrappedDomains owned by the account"
    wrappedDomains: [WrappedDomain!] @derivedFrom(field: "owner")
    "The Registrations made by the account"
    registrations: [Registration!] @derivedFrom(field: "registrant")
}

type DomainNameMeta {
    "The human readable name (imported from CSV), if known"
    id: ID!
    domain: Domain!
}

type WrappedDomain {
    "unique identifier for each instance of the WrappedDomain entity"
    id: ID!
    "The domain that is wrapped by this WrappedDomain"
    domain: Domain!
    "The expiry date of the wrapped domain"
    expiryDate: BigInt!
    "The number of fuses remaining on the wrapped domain"
    fuses: BigInt!
    "The account that owns this WrappedDomain"
    owner: Account!
    "The name of the wrapped domain"
    name: String
}

type Registration  {
    "The unique identifier of the registration"
    id: ID!
    "The domain name associated with the registration"
    domain: Domain!
    "The registration date of the domain"
    registrationDate: BigInt!
    "The expiry date of the domain"
    expiryDate: BigInt!
    "The cost associated with the domain registration"
    cost: BigInt
    "The account that registered the domain"
    registrant: Account!
}


type Domain  {
    "The name hash(node) of the name"
    id: ID!
    "The human readable label name (imported from CSV), if known"
    label: String
    "The namehash (id) of the parent name"
    parent: Domain
    "Can count domains from length of array"
    subdomains: [Domain!]! @derivedFrom(field: "parent")
    "The number of subdomains"
    subdomainCount: Int!
    "The time-to-live (TTL) value of the domain's records"
    ttl: BigInt
    "The time when the domain was created"
    blockTimestamp: Int!
    "The account that owns the domain"
    owner: Account!
    "The account that owns the wrapped domain"
    wrappedOwner: Account
    srcAddress: String
    "The expiry date for the domain, from either the registration, or the wrapped domain if PCC is burned"
    expiryDate: BigInt
    "The wrapped domain associated with the domain"
    wrappedDomain: WrappedDomain @derivedFrom(field: "domain")
    "The registration associated with the domain"
    registration: Registration @derivedFrom(field: "domain")
    "The account that owns the ERC721 NFT for the domain"
    registrant: Account

    baseCost: BigInt
    renewPremium: BigInt
    resolver: String
    name: DomainNameMeta!
}

